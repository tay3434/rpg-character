"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.injectManifest = exports.generateSW = void 0;
const workbox_build_1 = require("workbox-build");
const prettyBytes = __importStar(require("pretty-bytes"));
const esbuild = __importStar(require("esbuild"));
const name = 'workbox';
const report = ({ swDest, count, size }) => {
    const prettySize = prettyBytes.default(size);
    console.log(`\nThe service worker file was written to ${swDest}`);
    console.log(`The service worker will precache ${count} URLs, totaling ${prettySize}.\n`);
};
function generateSW(generateSWConfig, { render = report } = {}) {
    const { swDest, globDirectory } = generateSWConfig;
    if (!swDest)
        throw new Error('No service worker destination specified');
    if (!globDirectory)
        throw new Error('No globDirectory specified');
    const doRender = ({ count, size, }) => render({ swDest, count, size });
    return {
        name,
        writeBundle() {
            return (0, workbox_build_1.generateSW)(generateSWConfig).then(doRender).catch(console.error);
        },
    };
}
exports.generateSW = generateSW;
function injectManifest(injectManifestConfig, { render = report, esbuild: esbuildOptions, } = {}) {
    const { swSrc, swDest, globDirectory } = injectManifestConfig;
    if (!swSrc)
        throw new Error('No service worker source specified');
    if (!swDest)
        throw new Error('No service worker destination specified');
    if (!globDirectory)
        throw new Error('No globDirectory specified');
    const doRender = ({ count, size, }) => render({ swDest, count, size });
    return {
        name,
        async writeBundle() {
            await esbuild.build(Object.assign(Object.assign({ bundle: true, minify: true, format: 'iife' }, esbuildOptions), { entryPoints: [swSrc], outfile: swDest }));
            injectManifestConfig.swSrc = swDest;
            return (0, workbox_build_1.injectManifest)(injectManifestConfig).then(doRender).catch(console.error);
        },
    };
}
exports.injectManifest = injectManifest;
//# sourceMappingURL=index.js.map